import sys
import os
import logging
from google.generativeai import GenerativeModel
import google.generativeai as genai

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s [%(levelname)s] %(message)s')
logger = logging.getLogger(__name__)

def main():
    try:
        # Check if file path is provided
        if len(sys.argv) != 2:
            logger.error("Transcription file path not provided")
            print("Error: Transcription file path not provided", file=sys.stderr)
            sys.exit(1)

        transcription_file = sys.argv[1]
        logger.info(f"Reading transcription file: {transcription_file}")

        # Verify file exists
        if not os.path.exists(transcription_file):
            logger.error(f"Transcription file not found: {transcription_file}")
            print(f"Error: Transcription file not found: {transcription_file}", file=sys.stderr)
            sys.exit(1)

        # Read the transcription
        with open(transcription_file, "r") as file:
            transcription = file.read().strip()

        if not transcription:
            logger.warning("Transcription file is empty")
            print("No notes generated due to empty transcription")
            sys.exit(0)

        # Get API key from environment variable
        api_key = os.getenv("GEMINI_API_KEY")
        if not api_key:
            logger.error("GEMINI_API_KEY environment variable not set")
            print("Error: GEMINI_API_KEY environment variable not set", file=sys.stderr)
            sys.exit(1)

        # Configure Gemini API
        logger.info("Configuring Gemini API...")
        genai.configure(api_key=api_key)
        model = GenerativeModel("gemini-1.5-flash")
        logger.info("Gemini API configured successfully")

        # Format the transcription
        logger.info("Formatting transcription...")
        prompt = f"Format the following transcription into concise, readable notes:\n\n{transcription}"
        response = model.generate_content(prompt)
        formatted_notes = response.text.strip()

        if not formatted_notes:
            logger.warning("No formatted notes generated by Gemini API")
            print("No notes generated by Gemini API")
        else:
            logger.info("Formatted notes generated successfully")
            print(formatted_notes)

    except Exception as e:
        logger.error(f"Error formatting notes: {str(e)}")
        print(f"Error: Failed to format notes - {str(e)}", file=sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
    main()
